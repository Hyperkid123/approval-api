{
    "openapi": "3.0.0",
    "info": {
        "title": "Insights Service Approval APIs",
        "description": "APIs to query approval service",
        "version": "1.0.0",
        "contact": {
            "email": "support@redhat.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "tags": [
        {
            "name": "Action",
            "description": "Operations about actions"
        },
        {
            "name": "Group",
            "description": "Operations about groups"
        },
        {
            "name": "Request",
            "description": "Operations about requests"
        },
        {
            "name": "Stage",
            "description": "Operations about stages"
        },
        {
            "name": "Template",
            "description": "Operations about templates"
        },
        {
            "name": "User",
            "description": "Operations about users"
        },
        {
            "name": "Workflow",
            "description": "Operations about workflows"
        }
    ],
    "paths": {
        "/stages/{stage_id}/actions": {
            "post": {
                "tags": [
                  "Action"
                ],
                "summary": "Add an action to a given stage",
                "description": "Add an action to a given stage",
                "operationId": "create",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/stage_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/ActionIn"
                            }
                        }
                    },
                    "description": "Action object that will be added",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "get": {
                "tags": [
                  "Action"
                ],
                "summary": "Return actions in a given stage",
                "description": "List all actions of a stage",
                "operationId": "index",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/stage_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/actions/{id}": {
            "get": {
                "tags": [
                  "Action"
                ],
                "summary": "Return an user action by id",
                "description": "Return an user action by id",
                "operationId": "show",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/ActionOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                  "User"
                ],
                "summary": "Return a list of users",
                "description": "Return a list of users",
                "operationId": "index",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "post": {
                "tags": [
                  "User"
                ],
                "summary": "Add a new user by given parameters",
                "description": "Add a new user by given parameters",
                "operationId": "create",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserIn"
                            }
                        }
                    },
                    "description": "Parameters need to create user",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "tags": [
                  "User"
                ],
                "summary": "Return user by given id",
                "description": "Return user by given id",
                "operationId": "show",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "patch": {
                "tags": [
                  "User"
                ],
                "summary": "Update an user by given id",
                "description": "Update an user by given id",
                "operationId": "update",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/UserIn"
                            }
                        }
                    },
                    "description": "User object that needs to be updated",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "delete": {
                "tags": [
                  "User"
                ],
                "summary": "Delete user by given id",
                "description": "Delete user by given id",
                "operationId": "destroy",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/users/{user_id}/groups": {
            "get": {
                "tags": [
                  "Group"
                ],
                "summary": "Return associated groups by given user id",
                "description": "Return groups by given user id",
                "operationId": "index",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/user_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/users/{user_id}/requests": {
            "get": {
                "tags": [
                  "Request"
                ],
                "summary": "Return associated requests by given user id",
                "description": "Return requests by given user id",
                "operationId": "index",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/user_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/groups": {
            "get": {
                "tags": [
                  "Group"
                ],
                "summary": "Return all user groups",
                "description": "Return all user groups",
                "operationId": "index",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "post": {
                "tags": [
                  "Group"
                ],
                "summary": "Add a new user group by given parameters",
                "description": "Add a new user group by given parameters",
                "operationId": "create",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupIn"
                            }
                        }
                    },
                    "description": "Parameters need to create user group",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/groups/{id}": {
            "get": {
                "tags": [
                  "Group"
                ],
                "summary": "Return user group by given id",
                "description": "Return user group by given id",
                "operationId": "show",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "patch": {
                "tags": [
                  "Group"
                ],
                "summary": "Update an user group by given id",
                "description": "Update an user group by given id",
                "operationId": "update",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupIn"
                            }
                        }
                    },
                    "description": "User group object that needs to be updated",
                    "required": true
                },
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "post": {
                "tags": [
                  "Group"
                ],
                "summary": "Update users in a given group",
                "description": "Add or remove some users from a given group. It does not replace all users.",
                "operationId": "groupOperation",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/GroupOperationIn"
                            }
                        }
                    },
                    "description": "Parameters need to operate groups",
                    "required": true
                },
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "delete": {
                "tags": [
                  "Group"
                ],
                "summary": "Delete user group by given id",
                "description": "Delete group by given id",
                "operationId": "destroy",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Success"
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/groups/{group_id}/users": {
            "get": {
                "tags": [
                  "User"
                ],
                "summary": "Return associated users by given group id",
                "description": "Return users by given group id",
                "operationId": "index",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/group_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/UserOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/requests": {
            "get": {
                "tags": [
                  "Request"
                ],
                "summary": "Return an array of approval requests",
                "description": "Return an array of requests",
                "operationId": "index",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/decision"
                    },
                    {
                        "$ref": "#/components/parameters/state"
                    },
                    {
                        "$ref": "#/components/parameters/requester"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/workflows/{workflow_id}/requests": {
            "get": {
                "tags": [
                  "Request"
                ],
                "summary": "Return approval requests by given workflow id",
                "description": "Return approval requests by given workflow id",
                "operationId": "index",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/workflow_id"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "post": {
                "tags": [
                  "Request"
                ],
                "summary": "Add an approval request by given parameters",
                "description": "Add an approval request by given parameters",
                "operationId": "create",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/workflow_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/RequestIn"
                            }
                        }
                    },
                    "description": "Parameters need to create a request",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/requests/{id}": {
            "get": {
                "tags": [
                  "Request"
                ],
                "summary": "Return an approval request by given id",
                "description": "Return an approval request by given id",
                "operationId": "show",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/RequestOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/requests/{request_id}/stages": {
            "get": {
                "tags": [
                  "Stage"
                ],
                "summary": "Return an array of stages by given request id",
                "description": "Return an array of stages by given request id",
                "operationId": "index",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/request_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/StageOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/stages/{id}": {
            "get": {
                "tags": [
                  "Stage"
                ],
                "summary": "Return an approval stage by given id",
                "description": "Return an approval stage by given id",
                "operationId": "show",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/StageOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/templates": {
            "get": {
                "tags": [
                  "Template"
                ],
                "summary": "Return all templates",
                "description": "Return all templates",
                "operationId": "index",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/templates/{id}": {
            "get": {
                "tags": [
                  "Template"
                ],
                "summary": "Return a template by given id",
                "description": "Return a template by given id",
                "operationId": "show",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/TemplateOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/workflows": {
            "get": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Return all approval workflows",
                "description": "Return all approval workflows",
                "operationId": "index",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/templates/{template_id}/workflows": {
            "get": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Return an array of workflows by given template id",
                "description": "Return an array of workflows by given template id",
                "operationId": "index",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/template_id"
                    },
                    {
                        "$ref": "#/components/parameters/limit"
                    },
                    {
                        "$ref": "#/components/parameters/offset"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "post": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Add a workflow by given template id",
                "description": "Add a workflow by given template id",
                "operationId": "create",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/template_id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkflowIn"
                            }
                        }
                    },
                    "description": "Parameters need to create workflow",
                    "required": true
                },
                "responses": {
                    "201": {
                        "description": "Success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/workflows/{id}": {
            "get": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Return an approval workflow by given id",
                "description": "Return an approval workflow by given id",
                "operationId": "show",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "content": {
                            "*/*": {
                                "schema": {
                                    "$ref": "#/components/schemas/WorkflowOut"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "patch": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Update an approval workflow by given id",
                "description": "Update an approval workflow by given id",
                "operationId": "update",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/WorkflowIn"
                            }
                        }
                    },
                    "description": "Parameters need to update approval workflow",
                    "required": true
                },
                "responses": {
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            },
            "delete": {
                "tags": [
                  "Workflow"
                ],
                "summary": "Delete approval workflow by given id",
                "description": "Delete approval workflow by given id",
                "operationId": "destroy",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/id"
                    }
                ],
                "responses": {
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        },
        "/workflows/{workflow_id}/groups": {
            "get": {
                "tags": [
                  "Group"
                ],
                "summary": "Return an array of groups for the workflow",
                "description": "Return an array of groups for the workflow",
                "operationId": "index",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/workflow_id"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "headers": {
                            "X-total-count": {
                                "description": "Total number of items",
                                "schema": {
                                    "type": "integer"
                                }
                            }
                        },
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/GroupOutCollection"
                                }
                            }
                        }
                    },
                    "400": {
                        "$ref": "#/components/responses/400BadRequestResponse"
                    },
                    "401": {
                        "$ref": "#/components/responses/401UnauthorizedResponse"
                    },
                    "403": {
                        "$ref": "#/components/responses/403ForbiddenResponse"
                    },
                    "404": {
                        "$ref": "#/components/responses/404NotFoundResponse"
                    },
                    "422": {
                        "$ref": "#/components/responses/422UnprocessableEntityResponse"
                    }
                }
            }
        }
    },
    "security": [
        {
            "APIKey_auth": []
        }
    ],
    "externalDocs": {
        "description": "Find out more about Swagger",
        "url": "http://swagger.io"
    },
    "servers": [
        {
            "url": "http://localhost:3000"
        }
    ],
    "components": {
        "parameters": {
            "id": {
                "name": "id",
                "in": "path",
                "description": "Query by id",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "user_id": {
                "name": "user_id",
                "in": "path",
                "description": "Id of user",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "template_id": {
                "name": "template_id",
                "in": "path",
                "description": "Id of template",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "workflow_id": {
                "name": "workflow_id",
                "in": "path",
                "description": "Id of workflow",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "group_id": {
                "name": "group_id",
                "in": "path",
                "description": "Id of group",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "request_id": {
                "name": "request_id",
                "in": "path",
                "description": "Id of request",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "stage_id": {
                "name": "stage_id",
                "in": "path",
                "description": "Id of stage",
                "required": true,
                "schema": {
                    "type": "integer"
                }
            },
            "limit": {
                "name": "limit",
                "in": "query",
                "description": "How many items to return at one time (max 1000)",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 20,
                    "maximum": 100,
                    "default": 20
                }
            },
            "offset": {
                "name": "offset",
                "in": "query",
                "description": "Starting Offset",
                "required": false,
                "schema": {
                    "type": "integer",
                    "format": "int32",
                    "minimum": 0,
                    "default": 0
                }
            },
            "state": {
                "name": "state",
                "in": "query",
                "description": "Fetch item by given state (pending, skipped, notified, finished)",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "pending",
                            "skipped",
                            "notified",
                            "finished"
                        ]
                    }
                }
            },
            "decision": {
                "name": "decision",
                "in": "query",
                "description": "Fetch item by given decision (undecided, approved, denied)",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string",
                        "enum": [
                            "undecided",
                            "approved",
                            "denied"
                        ]
                    }
                }
            },
            "requester": {
                "name": "requester",
                "in": "query",
                "description": "Fetch item by given requester",
                "required": false,
                "schema": {
                    "type": "string"
                }
            }
        },
        "responses": {
            "400BadRequestResponse": {
                "description": "Bad request"
            },
            "401UnauthorizedResponse": {
                "description": "Caller is not authorized to access the resource."
            },
            "403ForbiddenResponse": {
                "description": "Caller is forbidden to perform the action."
            },
            "404NotFoundResponse": {
                "description": "The requested resource is not found."
            },
            "422UnprocessableEntityResponse": {
                "description": "The required paramters are either invalid or missed."
            },
            "DefaultUnexpectedResponse": {
                "description": "An unexpected response."
            }
        },
        "securitySchemes": {
            "APIKey_auth": {
                "type": "apiKey",
                "in": "header",
                "name": "x-rh-auth-identity",
                "description": "This is a base64 encoded string of a collection of attributes, that identify a user. This token is needed when accessing the API internally."
            }
        },
        "schemas": {
            "ActionIn": {
                "type": "object",
                "description": "Input parameters for Action object",
                "required": [
                    "operation"
                ],
                "properties": {
                    "processed_by": {
                        "type": "string",
                        "description": "The person who performs the action"
                    },
                    "operation": {
                        "type": "string",
                        "description": "Types of action, may be one of the value (approve, deny, notify, memo, or skip). The stage will be updated according to the operation.",
                        "enum": [
                            "approve",
                            "deny",
                            "notify",
                            "memo",
                            "skip"
                        ],
                        "default": "memo"
                    },
                    "comments": {
                        "type": "string",
                        "description": "Comments for action",
                        "readOnly": true
                    }
                }
            },
            "ActionOut": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/ActionIn"
                    },
                    {
                        "type": "object",
                        "required": [
                            "id",
                            "stage_id"
                        ],
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "created_at": {
                                "type": "string",
                                "format": "date-time",
                                "description": "Timestamp of creation"
                            },
                            "stage_id": {
                                "type": "string",
                                "description": "Associated stage id"
                            }
                        }
                    }
                ]
            },
            "UserIn": {
                "type": "object",
                "description": "Input parameters for User object",
                "required": [
                    "email"
                ],
                "properties": {
                    "email": {
                        "type": "string",
                        "description": "Email address of the user"
                    },
                    "first_name": {
                        "type": "string"
                    },
                    "last_name": {
                        "type": "string"
                    }
                }
            },
            "UserOut": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/UserIn"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "GroupIn": {
                "type": "object",
                "description": "Input parameters for Group object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Group name"
                    }
                }
            },
            "GroupOut": {
                "description": "User groups.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/GroupIn"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            }
                        }
                    }
                ]
            },
            "GroupOperationIn": {
                "type": "object",
                "description": "Operation type and parameters to a given group",
                "required": [
                    "operation",
                    "parameters"
                ],
                "properties": {
                    "operation": {
                        "type": "string",
                        "description": "Types of group operation, may be either join_users or withdraw_users.",
                        "enum": [
                            "join_users",
                            "withdraw_users"
                        ]
                    },
                    "parameters": {
                        "type": "object",
                        "description": "JSON object. Currently user ids in the group",
                        "example": {
                            "user_ids": [
                                1,
                                2
                            ]
                        }
                    }
                }
            },
            "RequestIn": {
                "type": "object",
                "description": "Input parameters for approval request object.",
                "required": [
                    "name",
                    "content"
                ],
                "properties": {
                    "requester": {
                        "type": "string",
                        "description": "Requester id"
                    },
                    "name": {
                        "type": "string",
                        "description": "Request name"
                    },
                    "description": {
                        "type": "string",
                        "description": "Request description"
                    },
                    "content": {
                        "type": "object",
                        "description": "JSON object with request content"
                    }
                }
            },
            "RequestOut": {
                "description": "Approval request. Each request will associate with a workflow. Corresponding to the groups of the associated workflow, every request will have a list of stages to record the request processing details.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/RequestIn"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "state": {
                                "type": "string",
                                "description": "The state of stage or request. It may be one of values (pending, skipped, notified or finished)",
                                "enum": [
                                    "pending",
                                    "skipped",
                                    "notified",
                                    "finished"
                                ],
                                "default": "pending"
                            },
                            "decision": {
                                "type": "string",
                                "description": "Final decision, may be one of the value (undecided, approved, or denied)",
                                "enum": [
                                    "undecided",
                                    "approved",
                                    "denied"
                                ],
                                "default": "undecided"
                            },
                            "reason": {
                                "type": "string",
                                "description": "Comments for requests"
                            },
                            "workflow_id": {
                                "type": "string",
                                "description": "Associate workflow id"
                            }
                        }
                    }
                ]
            },
            "StageOut": {
                "type": "object",
                "description": "A stage of an approval request.",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "name": {
                        "type": "string",
                        "description": "name of the group that processes the stage"
                    },
                    "group_id": {
                        "type": "string",
                        "description": "Associated group id"
                    },
                    "state": {
                        "type": "string",
                        "description": "The state of stage or request. It may be one of values (pending, skipped, notified or finished)",
                        "enum": [
                            "pending",
                            "skipped",
                            "notified",
                            "finished"
                        ],
                        "default": "pending"
                    },
                    "decision": {
                        "type": "string",
                        "description": "Final decision, may be one of the value (undecided, approved, or denied)",
                        "enum": [
                            "undecided",
                            "approved",
                            "denied"
                        ],
                        "default": "undecided"
                    },
                    "notified_at": {
                        "type": "date-time",
                        "description": "the time approvers in the stage are notified"
                    }
                }
            },
            "TemplateOut": {
                "type": "object",
                "description": "The template to categorize workflows.",
                "properties": {
                    "id": {
                        "type": "string"
                    },
                    "title": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "Workflow": {
                "type": "object",
                "required": [
                    "name"
                ],
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "description": {
                        "type": "string"
                    }
                }
            },
            "WorkflowOut": {
                "description": "The workflow to process approval requests. Each workflow is linked to multiple groups of approvals.",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Workflow"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "id": {
                                "type": "string"
                            },
                            "template_id": {
                                "type": "string",
                                "description": "Associated template id"
                            }
                        }
                    }
                ]
            },
            "WorkflowIn": {
                "description": "Parameters to create a workflow",
                "allOf": [
                    {
                        "$ref": "#/components/schemas/Workflow"
                    },
                    {
                        "type": "object",
                        "required": [
                            "group_ids"
                        ],
                        "properties": {
                            "group_ids": {
                                "type": "array",
                                "description": "Group ids associated with workflow",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ]
            },
            "ActionOutCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/ActionOut"
                        }
                    }
                }
            },
            "GroupOutCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/GroupOut"
                        }
                    }
                }
            },
            "UserOutCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/UserOut"
                        }
                    }
                }
            },
            "RequestOutCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/RequestOut"
                        }
                    }
                }
            },
            "StageOutCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/StageOut"
                        }
                    }
                }
            },
            "TemplateOutCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/TemplateOut"
                        }
                    }
                }
            },
            "WorkflowOutCollection": {
                "type": "object",
                "properties": {
                    "meta": {
                        "$ref": "#/components/schemas/CollectionMetadata"
                    },
                    "links": {
                        "$ref": "#/components/schemas/CollectionLinks"
                    },
                    "data": {
                        "type": "array",
                        "items": {
                          "$ref": "#/components/schemas/WorkflowOut"
                        }
                    }
                }
            },
            "CollectionLinks": {
                "type": "object",
                "properties": {
                    "first": {
                        "type": "string",
                        "title": "First Link",
                        "description": "The link to fetch the first group of items in the result set"
                    },
                    "last": {
                        "type": "string",
                        "title": "Last Link",
                        "description": "The link to fetch the last group of items in the result set"
                    },
                    "prev": {
                        "type": "string",
                        "title": "Previous Link",
                        "description": "The link to fetch the previous group of items in the result set"
                    },
                    "next": {
                        "type": "string",
                        "title": "Next Link",
                        "description": "The link to fetch the next group of items in the result set"
                    }
                }
            },
            "CollectionMetadata": {
                "type": "object",
                "properties": {
                    "count": {
                        "type": "integer",
                        "title": "Total number of items in the result set",
                        "description": "This is the total number of items in the result set, of which only a subset is returned defined by the QueryLimit parameter"
                    }
                }
            }
        }
    }
}
